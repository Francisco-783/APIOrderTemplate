// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}


model ClientRequest {
  id          String               @id @default(uuid()) @unique
  createdAt   DateTime             @default(now())
  status      RequestStatus        @default(PENDING)
  delivery    Boolean              @default(true)
  totalPrice  Int                  @default(0)

  orders      ClientRequestOrder[] // Relación con las órdenes solicitadas
  extras      ClientRequestExtra[]
  promos      ClientRequestPromo[]           
}

model ClientRequestOrder { 
  id                String   @id @default(uuid()) @unique
  price             Int      @default(0)
  
  clientRequestId   String   // ID de la solicitud del cliente
  clientRequest     ClientRequest @relation(fields: [clientRequestId], references: [id])

  orderId           String   // ID de la orden solicitada
  isPromo           String  //if this have an id this become of a promotion (id of the request not the product)
  adds              ClientRequestAdds[] // Relación con los aditivos solicitados
  
}

model ClientRequestAdds { 
  id                String   @id @default(uuid()) @unique
  price             Int      @default(0)
  clientRequestOrderId String   // ID de la orden solicitada
  clientRequestOrder   ClientRequestOrder @relation(fields: [clientRequestOrderId], references: [id])
  addItemId          String   // ID del aditivo solicitado
  howMany           Int
}

model ClientRequestPromo {
  id                String   @id @default(uuid()) @unique
  price             Int      @default(0)
  clientRequestId   String
  clientRequest     ClientRequest @relation(fields: [clientRequestId], references: [id])
  promoId        String 
}

model ClientRequestExtra {
  id                String   @id @default(uuid()) @unique
  price             Int      @default(0)
  extraId         String 
  clientRequestId   String
  clientRequest     ClientRequest @relation(fields: [clientRequestId], references: [id])
}

enum RequestStatus {
  PENDING
  IN_PROGRESS
  REJECTED
  COMPLETED
}

model Promo {
  id              String      @id @default(uuid()) @unique
  name            String      @unique
  image           String
  visible         Boolean
  price           Int
  orders          Order[]          @relation("PromoOrders")
  extras          Extra[]          @relation("PromoExtras")
  createdBy       String
}

model Order {
  id              String           @id @default(uuid()) @unique
  name            String           @unique
  image           String
  description     String
  visible         Boolean
  price           Int
  promos          Promo[]          @relation("PromoOrders")
  addItems        AddItem[]        
  createdBy       String
}

model AddItem { //aditives to a order, extra fries or extra meat
  id          String   @id @default(uuid()) @unique
  name        String
  limit       Float
  price       Float
  order       Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId     String?
}

model Extra {
  id              String           @id @default(uuid()) @unique
  name            String           @unique
  image           String
  visible         Boolean
  price           Int
  promos          Promo[]          @relation("PromoExtras")
  createdBy       String
}


model Admin {
  id          String   @id @default(uuid()) @unique
  name        String   @unique
  password    String
  createdAt   DateTime @default(now())
}